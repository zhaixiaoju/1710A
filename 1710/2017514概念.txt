	solr:

solr是一个企业级的搜索技术，底层是基于lucence的，solr相比于普通的搜索的好处关键在于它的分词器，但是在国内solr对中文支持不是很好，所以我们一般需要借助第三方的分词器，当初在网上查阅资料后，我们选取了一个IK分词器，在创建solr索引的时候我们配置了一个dataimport，让solr直接和数据库连接起来，solr搜索的时候不会去数据库搜索而是在solr的索引库里边搜索，所以我们在里边配置上需要创建索引数据的查询sql，需要注意的是我们在创建索引的时候用了哪个分词器，在搜索的时候也得用那个分词器。
???
增量索引：我们在需要创建索引的表中会加一个时间字段，通过配置的deltaQuery根具时间查出上一次创建索引之后的数据，然后solr就会把这些查出来的数据创建成索引
删除索引：删除索引的时候需要我们查到需要删除的数据的id,我们在需要创建索引的数据表中加入了一个逻辑删除字段，当我们需要删除索引的时候我们要先把数据库的逻辑字段状态给更改掉，然后通过配置的deletedPkQuery查找到逻辑删除的数据的主键id，然后solr就会帮我们把solr索引库中的索引给删除掉
更新索引：更新索引其实就是走的增量索引，更新数据库数据的同时将那个时间字段也给更新了，然后调用solr接口通知solr增量更新索引。

	dubbo:

Dubbo是阿里巴巴SOA服务化治理方案的核心框架，每天为2,000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点。它是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。简单的说，dubbo就是个服务框架，如果没有分布式的需求，其实是不需要用的，只有在分布式的时候，才有dubbo这样的分布式服务框架的需求，并且本质上是个服务调用的东东，说白了就是个远程服务调用的分布式框架（告别Web Service模式中的WSdl，以服务者与消费者的方式在dubbo上注册）
其核心部分包含:
1. 远程通讯: 提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。
2. 集群容错: 提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。
3. 自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。



	mysql读写分离，主从同步怎么配置的，如何降低延迟


读写分离配置：在项目中我们配置了两个数据源，一个主数据库的，一个是从数据库的，在事务配置的时候，我们给从的数据dataSource配置了只读事务，在项目中根据操作判断注入不同的数据源，如果是增删改操作的注入主的数据源，所有的查询操作注入从的数据源，主从同步配置：首先找到主数据库的my.ini文件，在里边配置server-id 每个数据库的server-id不能重复要保证唯一,	配置binlog-do-db指明需要同步的数据库，log-bin来指明日志文件，配置完后，重启主数据库的服务，登陆主数据库，创建一个用于从数据库访问的用户，然后通过show master status;查询出主数据库的状态，记录下它的File和Position的值，紧接着配置从数据库，找到从数据库的my.ini文件，在里边配置server-id，log-bin和replicate-do-db 	指明需要同步的数据库，然后重启从数据库的服务，重启完后登陆从数据库，创建从数据库对主数据库的连接，	master_log_file要和刚才主数据库查询的File字段内容一致，master_log_pos要和主数据库刚才查出的Position一致，	然后通过slave start，来启动从数据库，这样主从同步就配置好了。
如何降低延迟：
1.主库和同库尽可能在同一个局域网内，交换机网卡采用千兆网卡。
2.主数据库更新完成之后产生的操作日志不是瞬间产生的，我们可以通过设置sync(sen ke)_binlog=1, 让它瞬间产生磁盘日志，（n=1指主数据库只要操作一次，就产生一次磁盘日志，n=10，就是操作10次，产生一次），从数据库可以依赖磁盘日志，瞬间产生同步，可以达到减低延迟的效果。
3. 设置主库和从库读取日志失败之后，及时重新建立连接，延迟缩短。



 	nginx+tomcat集群配置，如何解决session共享问题

首先开启每个tomcat的集群策略，在每个tomcat的service.xml中添加Cluster标签，然后在Engine标签里配置上jvmRoute，每台tomcat的jvmRoute配置的名称要一样，这样也就解决了session共享的问题了，nginx的话打开我们的nginx.conf配置文件，在里边配置集群的负载策略，nginx里边支持轮询、权重、ip_hash等策略，由于我门的服务器在硬件配置上一样，所以我们采了ip_hash策略，ip_hash 也就是说一个用户第一次访问nginx，nginx会将第一分发的请求服务器ip地址记录下来，下次访问的时候，发现之前有过访问，就会将第二次的访问还分发到第一次访问的服务器上。如果刚好分发的服务器宕机了，nginx就会自动给你分配到一个新的服务器上。

1.Tomcat中配jvmRote，jvmRoute配置的名称要一样
2、不使用session，换用cookie
3、session存在数据库（MySQL等）中
4、session存在memcache或者redis中
5.nginx中的ip_hash技术能够将某个ip的请求定向到同一台后端，这样一来这个ip下的某个客户端和某个后端就能建立起稳固的session
